// Generated by CoffeeScript 1.4.0
(function() {
  var Alfred, call, fs, path, system, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  _ref = require('./utils'), call = _ref.call, system = _ref.system;

  Alfred = (function() {

    function Alfred(options) {
      var _base, _ref1;
      this.options = options != null ? options : {};
      this.say = __bind(this.say, this);

      this.saveSay = __bind(this.saveSay, this);

      this.sayRandom = __bind(this.sayRandom, this);

      this.saveSayRandom = __bind(this.saveSayRandom, this);

      this._sayRandom = __bind(this._sayRandom, this);

      this.listVoiceWords = __bind(this.listVoiceWords, this);

      this.listWords = __bind(this.listWords, this);

      this.getVoices = __bind(this.getVoices, this);

      this.sayAlfredPass = __bind(this.sayAlfredPass, this);

      this.saveSayList = __bind(this.saveSayList, this);

      this._sayList = __bind(this._sayList, this);

      this._say = __bind(this._say, this);

      this.getVoicesThatHaveWordSync = __bind(this.getVoicesThatHaveWordSync, this);

      this.getDestFile = __bind(this.getDestFile, this);

      this.getWordPath = __bind(this.getWordPath, this);

      this.getVoicePath = __bind(this.getVoicePath, this);

      this.listVoices = __bind(this.listVoices, this);

      this.getPlay = __bind(this.getPlay, this);

      this.getSox = __bind(this.getSox, this);

      if ((_ref1 = (_base = this.options).voicesDirectory) == null) {
        _base.voicesDirectory = path.join(__dirname, '../voices');
      }
      this.cache = {};
      return this;
    }

    Alfred.prototype.getSox = function() {
      return 'sox';
    };

    Alfred.prototype.getPlay = function() {
      return 'play';
    };

    Alfred.prototype.listVoices = function(fn) {
      return fs.readdir(this.options.voicesDirectory, fn);
    };

    Alfred.prototype.getVoicePath = function(voice) {
      return path.join(this.options.voicesDirectory, voice);
    };

    Alfred.prototype.getWordPath = function(word, voice) {
      if (voice == null) {
        voice = null;
      }
      if (voice == null) {
        voice = this.options.voice;
      }
      return path.join(this.options.voicesDirectory, voice, "" + word + ".mp3");
    };

    Alfred.prototype.getDestFile = function(file) {
      if (file == null) {
        file = 'alfred.mp3';
      }
      return this.options.out || path.join("/tmp", file);
    };

    Alfred.prototype.getVoicesThatHaveWordSync = function(theWord) {
      var voice, voices, word, words, _i, _len, _ref1;
      voices = [];
      _ref1 = this.cache.voicesWords;
      for (voice in _ref1) {
        words = _ref1[voice];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          if (word === theWord) {
            voices.push(voice);
          }
        }
      }
      return voices;
    };

    Alfred.prototype._say = function(words, destFile, fn) {
      var cmd,
        _this = this;
      cmd = [this.getSox()];
      return this.listWords(function(err, voiceWords) {
        var file, voice, voicesWithWord, word, _i, _len;
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          voicesWithWord = _this.getVoicesThatHaveWordSync(word);
          voice = voicesWithWord[Math.floor(Math.random() * voicesWithWord.length)];
          file = _this.getWordPath(word, voice);
          cmd.push(file);
        }
        cmd.push(destFile);
        return fn(false, cmd);
      });
    };

    Alfred.prototype._sayList = function(words, destFile, fn) {
      var cmd,
        _this = this;
      if (destFile == null) {
        destFile = null;
      }
      cmd = [this.getSox()];
      return this.listWords(function(err, voiceWords) {
        var file, voice, voicesWithWord, word, _i, _len;
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          voicesWithWord = _this.getVoicesThatHaveWordSync(word);
          voice = voicesWithWord[Math.floor(Math.random() * voicesWithWord.length)];
          file = _this.getWordPath(word, voice);
          cmd.push(file);
        }
        cmd.push(destFile);
        console.log(cmd);
        return fn(false, cmd);
      });
    };

    Alfred.prototype.saveSayList = function(words, destFile, fn) {
      var _this = this;
      if (destFile == null) {
        destFile = null;
      }
      return this._sayList(words, destFile, function(err, cmd) {
        var args, bin, _ref1;
        _ref1 = [cmd[0], cmd.slice(1)], bin = _ref1[0], args = _ref1[1];
        console.log(bin, args);
        return call(bin, args, function(err, data) {
          console.log("Done. " + destFile);
          return fn(err, data);
        });
      });
    };

    Alfred.prototype.sayAlfredPass = function(length, fn) {
      var chars, destFile, i, passphrase, passphrase_str, passphrase_translate, word, words, _i, _j, _len, _ref1,
        _this = this;
      if (length == null) {
        length = 42;
      }
      words = ['attention_voici_la_passphrase'];
      this.listWords(function(err, voiceWords) {});
      chars = [];
      chars = chars.concat(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']);
      chars = chars.concat(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']);
      chars = chars.concat(['!', '#', '%', '&', '(', ')', '+', ',', '-', '_', '^', ';', '=', '@', ']', '[']);
      chars = chars.concat(['deux-points', 'pipe', 'point', 'redir-droite', 'redir-gauche', 'etoile', 'interrogation', 'quote']);
      chars = chars.concat(['bucheron', 'electroencephalogramme', 'electronarcose', 'encyclopedie', 'habituellement', 'hypocondriaque', 'lampadaire', 'mephistophelique', 'noisette', 'ornithorynque', 'radiateur', 'tournevis']);
      passphrase_translate = {
        backslash: '\\',
        'deux-points': ':',
        'double-quote': '"',
        pipe: '|',
        'redir-droite': '>',
        'redir-gauche': '<',
        slash: '/',
        etoile: '*',
        interrogation: '?',
        quote: "'"
      };
      for (i = _i = 0; 0 <= length ? _i <= length : _i >= length; i = 0 <= length ? ++_i : --_i) {
        words.push(chars[Math.floor(Math.random() * chars.length)]);
      }
      words.push('voila');
      passphrase = [];
      _ref1 = words.slice(1, words.length - 1);
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        word = _ref1[_j];
        passphrase.push(passphrase_translate[word] != null ? passphrase_translate[word] : word);
      }
      passphrase_str = passphrase.join('');
      destFile = this.getDestFile("alfred_" + passphrase_str + ".mp3");
      return this.saveSayList(words, destFile, function(err, data) {
        system(_this.getPlay(), [destFile]);
        return console.log(passphrase_str);
      });
    };

    Alfred.prototype.getVoices = function(fn) {
      if (this.options.voice) {
        return fn(false, [this.options.voice]);
      }
      return this.listVoices(fn);
    };

    Alfred.prototype.listWords = function(fn) {
      var todo, voicesWords, _ref1,
        _this = this;
      if ((_ref1 = this.cache) != null ? _ref1.voicesWords : void 0) {
        return fn(false, this.cache.voicesWords);
      }
      voicesWords = {};
      todo = 0;
      return this.getVoices(function(err, voices) {
        var _i, _len, _results, _voice;
        _results = [];
        for (_i = 0, _len = voices.length; _i < _len; _i++) {
          _voice = voices[_i];
          _results.push((function() {
            var voice;
            voice = _voice;
            voicesWords[voice] = [];
            todo++;
            return _this.listVoiceWords(voice, function(err, words) {
              var word, _j, _len1;
              if (!err) {
                for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
                  word = words[_j];
                  voicesWords[voice].push(word);
                }
              }
              if (!--todo) {
                _this.cache.voicesWords = voicesWords;
                return fn(false, voicesWords);
              }
            });
          })());
        }
        return _results;
      });
    };

    Alfred.prototype.listVoiceWords = function(voice, fn) {
      var _this = this;
      return fs.readdir(this.getVoicePath(voice), function(err, files) {
        var clean_files, file, k, word;
        clean_files = [];
        for (k in files) {
          file = files[k];
          word = files[k].slice(0, +(file.length - 5) + 1 || 9e9);
          if (__indexOf.call(clean_files, word) < 0) {
            clean_files.push(word);
          }
        }
        return fn(err, clean_files);
      });
    };

    Alfred.prototype._sayRandom = function(length, destFile, fn) {
      var cmd,
        _this = this;
      if (length == null) {
        length = 10;
      }
      if (destFile == null) {
        destFile = null;
      }
      cmd = [this.getSox()];
      return this.listWords(function(err, voiceWords) {
        var i, voice, voices, word, words, _i;
        voices = [
          (function() {
            var _results;
            _results = [];
            for (voice in voiceWords) {
              _results.push(voice);
            }
            return _results;
          })()
        ][0];
        console.log(voices);
        console.log(length);
        for (i = _i = 0; 0 <= length ? _i <= length : _i >= length; i = 0 <= length ? ++_i : --_i) {
          voice = voices[Math.floor(voices.length * Math.random())];
          words = voiceWords[voice];
          word = words[Math.floor(words.length * Math.random())];
          cmd.push(_this.getWordPath(word, voice));
        }
        cmd.push(destFile);
        console.log(cmd);
        return fn(false, cmd);
      });
    };

    Alfred.prototype.saveSayRandom = function(length, destFile, fn) {
      var _this = this;
      if (destFile == null) {
        destFile = null;
      }
      return this._sayRandom(length, destFile, function(err, cmd) {
        var args, bin, _ref1;
        _ref1 = [cmd[0], cmd.slice(1)], bin = _ref1[0], args = _ref1[1];
        console.log(bin, args);
        return call(bin, args, function(err, data) {
          console.log("Done. " + destFile);
          return fn(err, data);
        });
      });
    };

    Alfred.prototype.sayRandom = function(length, fn) {
      var destFile,
        _this = this;
      if (fn == null) {
        fn = null;
      }
      destFile = this.getDestFile();
      return this.saveSayRandom(length, destFile, function(err, data) {
        return system(_this.getPlay(), [destFile]);
      });
    };

    Alfred.prototype.saveSay = function(words, destFile, fn) {
      var _this = this;
      if (destFile == null) {
        destFile = null;
      }
      return this._say(words, destFile, function(err, cmd) {
        var args, bin, _ref1;
        _ref1 = [cmd[0], cmd.slice(1)], bin = _ref1[0], args = _ref1[1];
        console.log(bin, args);
        return call(bin, args, function(err, data) {
          console.log("Done. " + destFile);
          return fn(err, data);
        });
      });
    };

    Alfred.prototype.say = function(words, fn) {
      var destFile,
        _this = this;
      if (fn == null) {
        fn = null;
      }
      destFile = this.getDestFile();
      return this.saveSay(words, destFile, function(err, data) {
        return system(_this.getPlay(), [destFile]);
      });
    };

    return Alfred;

  })();

  module.exports = {
    Alfred: Alfred
  };

}).call(this);
