// Generated by CoffeeScript 1.4.0
(function() {
  var Alfred, Program, flatiron,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  flatiron = require('flatiron');

  Alfred = require('./Alfred').Alfred;

  Program = (function() {

    function Program(options) {
      var _base, _base1, _base2, _ref, _ref1, _ref2;
      this.options = options != null ? options : {};
      this.run = __bind(this.run, this);

      this.getAlfred = __bind(this.getAlfred, this);

      this.say = __bind(this.say, this);

      this.listVoices = __bind(this.listVoices, this);

      this.setupHandlers = __bind(this.setupHandlers, this);

      if ((_ref = (_base = this.options).name) == null) {
        _base.name = 'salut-c-est-alfred-ton-banquier-generator';
      }
      if ((_ref1 = (_base1 = this.options).argv) == null) {
        _base1.argv = {
          'verbose': {
            alias: 'v',
            boolean: true
          },
          'voice': {
            alias: 'V'
          },
          'out': {
            alias: 'o'
          }
        };
      }
      if ((_ref2 = (_base2 = this.options).usage) == null) {
        _base2.usage = ["  Usage: salut-c-est-alfred-ton-banquier-generator [options] method [arguments...]", "", "    Options:", "", "       -v, --verbose        verbose", "       -o, --out <file>     output file", "       -V, --voice <voice>  voice"];
      }
      flatiron.app.use(flatiron.plugins.cli, this.options);
    }

    Program.prototype.setupHandlers = function() {
      flatiron.app.cmd(/list-voices/, this.listVoices);
      return flatiron.app.cmd(/say (.+)/, this.say);
    };

    Program.prototype.listVoices = function(fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.getAlfred();
      this.alfred.listVoices(function(err, voices) {
        var voice, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = voices.length; _i < _len; _i++) {
          voice = voices[_i];
          _results.push(flatiron.app.log.info(voice));
        }
        return _results;
      });
      if (fn) {
        return fn();
      }
    };

    Program.prototype.say = function(words, fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.getAlfred();
      words = words.split(/\ /);
      this.alfred.say(words, function(err, data) {
        return flatiron.app.log.info(err, data);
      });
      if (fn) {
        return fn();
      }
    };

    Program.prototype.getAlfred = function() {
      __extends(this.options, flatiron.app.argv);
      this.alfred = new Alfred(this.options);
      return this.alfred;
    };

    Program.prototype.run = function() {
      return flatiron.app.start();
    };

    Program.getVersion = function() {
      return JSON.parse(require('fs').readFileSync("" + __dirname + "/../package.json", 'utf8')).version;
    };

    Program.run = function(options) {
      var prog;
      if (options == null) {
        options = {};
      }
      prog = new Program(options);
      prog.setupHandlers();
      return prog.run();
    };

    return Program;

  })();

  module.exports = {
    Program: Program,
    getVersion: Program.getVersion,
    run: Program.run
  };

}).call(this);
